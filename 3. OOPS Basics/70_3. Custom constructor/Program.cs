///
/// We will also see what the recommended naming for fields is.
/// 
/// 
/// There is a Microsoft-recommended coding convention that most C# programmers follow:
/// https://learn.microsoft.com/en-us/dotnet/csharp/fundamentals/coding-style/coding-conventions
/// 
/// According to this convention, public fields names should start with a capital letter.
/// Private fields names should start with an underscore followed by a lowercase letter.
/// 
/// We define a constructor similarly as we would define a method.
/// There are three important things that make the constructor different from other methods.
/// 
/// Firstly, it must be named the same as the type it belongs to.
/// Secondly, it doesn't have the return type declared, which was always the case for other methods.
/// Thirdly, constructors can only be called at the moment of object's creation.
/// There is no way to call them in any other context.
/// 
/// 
/// We have added the custom, i.e. parameterized constructor.
/// We have used it to intialize the field value.
/// Having any other business logic in the constructor is considered an antipattern.
/// The only exception is the validation of the values provided as the parameter.
/// 
/// The default parameterless constructor is only autogenerated if we don't provide any constructor of
/// our own.
/// 
/// Setting the values of fields in the constructor is very common, but it doesn't mean we cannot set them
/// right where we declare them like this: public int Width = 2;
/// 
/// 
/// If the constructor is called after the fields are assigned values they have been given
/// at the declaration, constructor will override them (only if we are initializing them again
/// in the constructor).
///


var rectangle = new Rectangle(1, 2);

Console.WriteLine(rectangle.Height);
Console.WriteLine(rectangle.Width);

Console.ReadKey();

class Rectangle
{
    public int Width;
    public int Height;


    public Rectangle(int width, int height)
    {
        Width = width;
        Height = height;
    }
}
